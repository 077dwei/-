# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import hdfs_pb2 as hdfs__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in hdfs_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NameNodeStub(object):
    """NameNode 提供元数据管理接口
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateFile = channel.unary_unary(
                '/hdfs.NameNode/CreateFile',
                request_serializer=hdfs__pb2.FileRequest.SerializeToString,
                response_deserializer=hdfs__pb2.BlockLocations.FromString,
                _registered_method=True)
        self.GetFile = channel.unary_unary(
                '/hdfs.NameNode/GetFile',
                request_serializer=hdfs__pb2.FileRequest.SerializeToString,
                response_deserializer=hdfs__pb2.BlockLocations.FromString,
                _registered_method=True)
        self.ListFiles = channel.unary_unary(
                '/hdfs.NameNode/ListFiles',
                request_serializer=hdfs__pb2.Empty.SerializeToString,
                response_deserializer=hdfs__pb2.FileList.FromString,
                _registered_method=True)


class NameNodeServicer(object):
    """NameNode 提供元数据管理接口
    """

    def CreateFile(self, request, context):
        """创建文件，返回每个块的 id 和对应的 DataNode 地址列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFile(self, request, context):
        """获取文件块列表及所在节点
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFiles(self, request, context):
        """列出所有文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NameNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateFile': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFile,
                    request_deserializer=hdfs__pb2.FileRequest.FromString,
                    response_serializer=hdfs__pb2.BlockLocations.SerializeToString,
            ),
            'GetFile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFile,
                    request_deserializer=hdfs__pb2.FileRequest.FromString,
                    response_serializer=hdfs__pb2.BlockLocations.SerializeToString,
            ),
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=hdfs__pb2.Empty.FromString,
                    response_serializer=hdfs__pb2.FileList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hdfs.NameNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hdfs.NameNode', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NameNode(object):
    """NameNode 提供元数据管理接口
    """

    @staticmethod
    def CreateFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hdfs.NameNode/CreateFile',
            hdfs__pb2.FileRequest.SerializeToString,
            hdfs__pb2.BlockLocations.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hdfs.NameNode/GetFile',
            hdfs__pb2.FileRequest.SerializeToString,
            hdfs__pb2.BlockLocations.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hdfs.NameNode/ListFiles',
            hdfs__pb2.Empty.SerializeToString,
            hdfs__pb2.FileList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DataNodeStub(object):
    """DataNode 提供块读写接口
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WriteBlock = channel.unary_unary(
                '/hdfs.DataNode/WriteBlock',
                request_serializer=hdfs__pb2.BlockData.SerializeToString,
                response_deserializer=hdfs__pb2.Ack.FromString,
                _registered_method=True)
        self.ReadBlock = channel.unary_unary(
                '/hdfs.DataNode/ReadBlock',
                request_serializer=hdfs__pb2.BlockID.SerializeToString,
                response_deserializer=hdfs__pb2.BlockData.FromString,
                _registered_method=True)


class DataNodeServicer(object):
    """DataNode 提供块读写接口
    """

    def WriteBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WriteBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteBlock,
                    request_deserializer=hdfs__pb2.BlockData.FromString,
                    response_serializer=hdfs__pb2.Ack.SerializeToString,
            ),
            'ReadBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadBlock,
                    request_deserializer=hdfs__pb2.BlockID.FromString,
                    response_serializer=hdfs__pb2.BlockData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hdfs.DataNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hdfs.DataNode', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataNode(object):
    """DataNode 提供块读写接口
    """

    @staticmethod
    def WriteBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hdfs.DataNode/WriteBlock',
            hdfs__pb2.BlockData.SerializeToString,
            hdfs__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hdfs.DataNode/ReadBlock',
            hdfs__pb2.BlockID.SerializeToString,
            hdfs__pb2.BlockData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
